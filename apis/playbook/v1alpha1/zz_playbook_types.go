// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2024 Cloudhippie <info@cloudhippie.de>
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PlaybookInitParameters struct {

	// playbook executable (binary).
	// Path to ansible-playbook executable (binary).
	AnsiblePlaybookBinary *string `json:"ansiblePlaybookBinary,omitempty" tf:"ansible_playbook_binary,omitempty"`

	// (Boolean) If 'true', playbook execution won't make any changes but only change predictions will be made.
	// If 'true', playbook execution won't make any changes but only change predictions will be made.
	CheckMode *bool `json:"checkMode,omitempty" tf:"check_mode,omitempty"`

	// (Boolean) If 'true', when changing (small) files and templates, differences in those files will be shown. Recommended usage with 'check_mode'.
	// If 'true', when changing (small) files and templates, differences in those files will be shown. Recommended usage with 'check_mode'.
	DiffMode *bool `json:"diffMode,omitempty" tf:"diff_mode,omitempty"`

	// 1 = value-1, key-2 = value-2, ... }.
	// A map of additional variables as: { key-1 = value-1, key-2 = value-2, ... }.
	ExtraVars map[string]*string `json:"extraVars,omitempty" tf:"extra_vars,omitempty"`

	// (Boolean) If 'true', run handlers even if a task fails.
	// If 'true', run handlers even if a task fails.
	ForceHandlers *bool `json:"forceHandlers,omitempty" tf:"force_handlers,omitempty"`

	// (List of String) List of desired groups of hosts on which the playbook will be executed.
	// List of desired groups of hosts on which the playbook will be executed.
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Boolean) This parameter is good for testing. Set to 'true' if the desired playbook is meant to fail, but still want the resource to run successfully.
	// This parameter is good for testing. Set to 'true' if the desired playbook is meant to fail, but still want the resource to run successfully.
	IgnorePlaybookFailure *bool `json:"ignorePlaybookFailure,omitempty" tf:"ignore_playbook_failure,omitempty"`

	// (List of String) List of hosts to exclude from the playbook execution.
	// List of hosts to exclude from the playbook execution.
	Limit []*string `json:"limit,omitempty" tf:"limit,omitempty"`

	// (String) Name of the desired host on which the playbook will be executed.
	// Name of the desired host on which the playbook will be executed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Path to ansible playbook.
	// Path to ansible playbook.
	Playbook *string `json:"playbook,omitempty" tf:"playbook,omitempty"`

	Replayable *bool `json:"replayable,omitempty" tf:"replayable,omitempty"`

	// (List of String) List of tags of plays and tasks to run.
	// List of tags of plays and tasks to run.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (List of String) List of variable files.
	// List of variable files.
	VarFiles []*string `json:"varFiles,omitempty" tf:"var_files,omitempty"`

	// (List of String) List of vault files.
	// List of vault files.
	VaultFiles []*string `json:"vaultFiles,omitempty" tf:"vault_files,omitempty"`

	// (String) ID of the desired vault(s).
	// ID of the desired vault(s).
	VaultID *string `json:"vaultId,omitempty" tf:"vault_id,omitempty"`

	// (String) Path to a vault password file.
	// Path to a vault password file.
	VaultPasswordFile *string `json:"vaultPasswordFile,omitempty" tf:"vault_password_file,omitempty"`

	// (Number) A verbosity level between 0 and 6. Set ansible 'verbose' parameter, which causes Ansible to print more debug messages. The higher the 'verbosity', the more debug details will be printed.
	// A verbosity level between 0 and 6. Set ansible 'verbose' parameter, which causes Ansible to print more debug messages. The higher the 'verbosity', the more debug details will be printed.
	Verbosity *float64 `json:"verbosity,omitempty" tf:"verbosity,omitempty"`
}

type PlaybookObservation struct {

	// playbook executable (binary).
	// Path to ansible-playbook executable (binary).
	AnsiblePlaybookBinary *string `json:"ansiblePlaybookBinary,omitempty" tf:"ansible_playbook_binary,omitempty"`

	// playbook CLI stderr output.
	// An ansible-playbook CLI stderr output.
	AnsiblePlaybookStderr *string `json:"ansiblePlaybookStderr,omitempty" tf:"ansible_playbook_stderr,omitempty"`

	// playbook CLI stdout output.
	// An ansible-playbook CLI stdout output.
	AnsiblePlaybookStdout *string `json:"ansiblePlaybookStdout,omitempty" tf:"ansible_playbook_stdout,omitempty"`

	// (List of String) Used to build arguments to run Ansible playbook with.
	// Used to build arguments to run Ansible playbook with.
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// (Boolean) If 'true', playbook execution won't make any changes but only change predictions will be made.
	// If 'true', playbook execution won't make any changes but only change predictions will be made.
	CheckMode *bool `json:"checkMode,omitempty" tf:"check_mode,omitempty"`

	// (Boolean) If 'true', when changing (small) files and templates, differences in those files will be shown. Recommended usage with 'check_mode'.
	// If 'true', when changing (small) files and templates, differences in those files will be shown. Recommended usage with 'check_mode'.
	DiffMode *bool `json:"diffMode,omitempty" tf:"diff_mode,omitempty"`

	// 1 = value-1, key-2 = value-2, ... }.
	// A map of additional variables as: { key-1 = value-1, key-2 = value-2, ... }.
	ExtraVars map[string]*string `json:"extraVars,omitempty" tf:"extra_vars,omitempty"`

	// (Boolean) If 'true', run handlers even if a task fails.
	// If 'true', run handlers even if a task fails.
	ForceHandlers *bool `json:"forceHandlers,omitempty" tf:"force_handlers,omitempty"`

	// (List of String) List of desired groups of hosts on which the playbook will be executed.
	// List of desired groups of hosts on which the playbook will be executed.
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) This parameter is good for testing. Set to 'true' if the desired playbook is meant to fail, but still want the resource to run successfully.
	// This parameter is good for testing. Set to 'true' if the desired playbook is meant to fail, but still want the resource to run successfully.
	IgnorePlaybookFailure *bool `json:"ignorePlaybookFailure,omitempty" tf:"ignore_playbook_failure,omitempty"`

	// (List of String) List of hosts to exclude from the playbook execution.
	// List of hosts to exclude from the playbook execution.
	Limit []*string `json:"limit,omitempty" tf:"limit,omitempty"`

	// (String) Name of the desired host on which the playbook will be executed.
	// Name of the desired host on which the playbook will be executed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Path to ansible playbook.
	// Path to ansible playbook.
	Playbook *string `json:"playbook,omitempty" tf:"playbook,omitempty"`

	Replayable *bool `json:"replayable,omitempty" tf:"replayable,omitempty"`

	// (List of String) List of tags of plays and tasks to run.
	// List of tags of plays and tasks to run.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) Path to created temporary inventory file.
	// Path to created temporary inventory file.
	TempInventoryFile *string `json:"tempInventoryFile,omitempty" tf:"temp_inventory_file,omitempty"`

	// (List of String) List of variable files.
	// List of variable files.
	VarFiles []*string `json:"varFiles,omitempty" tf:"var_files,omitempty"`

	// (List of String) List of vault files.
	// List of vault files.
	VaultFiles []*string `json:"vaultFiles,omitempty" tf:"vault_files,omitempty"`

	// (String) ID of the desired vault(s).
	// ID of the desired vault(s).
	VaultID *string `json:"vaultId,omitempty" tf:"vault_id,omitempty"`

	// (String) Path to a vault password file.
	// Path to a vault password file.
	VaultPasswordFile *string `json:"vaultPasswordFile,omitempty" tf:"vault_password_file,omitempty"`

	// (Number) A verbosity level between 0 and 6. Set ansible 'verbose' parameter, which causes Ansible to print more debug messages. The higher the 'verbosity', the more debug details will be printed.
	// A verbosity level between 0 and 6. Set ansible 'verbose' parameter, which causes Ansible to print more debug messages. The higher the 'verbosity', the more debug details will be printed.
	Verbosity *float64 `json:"verbosity,omitempty" tf:"verbosity,omitempty"`
}

type PlaybookParameters struct {

	// playbook executable (binary).
	// Path to ansible-playbook executable (binary).
	// +kubebuilder:validation:Optional
	AnsiblePlaybookBinary *string `json:"ansiblePlaybookBinary,omitempty" tf:"ansible_playbook_binary,omitempty"`

	// (Boolean) If 'true', playbook execution won't make any changes but only change predictions will be made.
	// If 'true', playbook execution won't make any changes but only change predictions will be made.
	// +kubebuilder:validation:Optional
	CheckMode *bool `json:"checkMode,omitempty" tf:"check_mode,omitempty"`

	// (Boolean) If 'true', when changing (small) files and templates, differences in those files will be shown. Recommended usage with 'check_mode'.
	// If 'true', when changing (small) files and templates, differences in those files will be shown. Recommended usage with 'check_mode'.
	// +kubebuilder:validation:Optional
	DiffMode *bool `json:"diffMode,omitempty" tf:"diff_mode,omitempty"`

	// 1 = value-1, key-2 = value-2, ... }.
	// A map of additional variables as: { key-1 = value-1, key-2 = value-2, ... }.
	// +kubebuilder:validation:Optional
	ExtraVars map[string]*string `json:"extraVars,omitempty" tf:"extra_vars,omitempty"`

	// (Boolean) If 'true', run handlers even if a task fails.
	// If 'true', run handlers even if a task fails.
	// +kubebuilder:validation:Optional
	ForceHandlers *bool `json:"forceHandlers,omitempty" tf:"force_handlers,omitempty"`

	// (List of String) List of desired groups of hosts on which the playbook will be executed.
	// List of desired groups of hosts on which the playbook will be executed.
	// +kubebuilder:validation:Optional
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Boolean) This parameter is good for testing. Set to 'true' if the desired playbook is meant to fail, but still want the resource to run successfully.
	// This parameter is good for testing. Set to 'true' if the desired playbook is meant to fail, but still want the resource to run successfully.
	// +kubebuilder:validation:Optional
	IgnorePlaybookFailure *bool `json:"ignorePlaybookFailure,omitempty" tf:"ignore_playbook_failure,omitempty"`

	// (List of String) List of hosts to exclude from the playbook execution.
	// List of hosts to exclude from the playbook execution.
	// +kubebuilder:validation:Optional
	Limit []*string `json:"limit,omitempty" tf:"limit,omitempty"`

	// (String) Name of the desired host on which the playbook will be executed.
	// Name of the desired host on which the playbook will be executed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Path to ansible playbook.
	// Path to ansible playbook.
	// +kubebuilder:validation:Optional
	Playbook *string `json:"playbook,omitempty" tf:"playbook,omitempty"`

	// +kubebuilder:validation:Optional
	Replayable *bool `json:"replayable,omitempty" tf:"replayable,omitempty"`

	// (List of String) List of tags of plays and tasks to run.
	// List of tags of plays and tasks to run.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (List of String) List of variable files.
	// List of variable files.
	// +kubebuilder:validation:Optional
	VarFiles []*string `json:"varFiles,omitempty" tf:"var_files,omitempty"`

	// (List of String) List of vault files.
	// List of vault files.
	// +kubebuilder:validation:Optional
	VaultFiles []*string `json:"vaultFiles,omitempty" tf:"vault_files,omitempty"`

	// (String) ID of the desired vault(s).
	// ID of the desired vault(s).
	// +kubebuilder:validation:Optional
	VaultID *string `json:"vaultId,omitempty" tf:"vault_id,omitempty"`

	// (String) Path to a vault password file.
	// Path to a vault password file.
	// +kubebuilder:validation:Optional
	VaultPasswordFile *string `json:"vaultPasswordFile,omitempty" tf:"vault_password_file,omitempty"`

	// (Number) A verbosity level between 0 and 6. Set ansible 'verbose' parameter, which causes Ansible to print more debug messages. The higher the 'verbosity', the more debug details will be printed.
	// A verbosity level between 0 and 6. Set ansible 'verbose' parameter, which causes Ansible to print more debug messages. The higher the 'verbosity', the more debug details will be printed.
	// +kubebuilder:validation:Optional
	Verbosity *float64 `json:"verbosity,omitempty" tf:"verbosity,omitempty"`
}

// PlaybookSpec defines the desired state of Playbook
type PlaybookSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PlaybookParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PlaybookInitParameters `json:"initProvider,omitempty"`
}

// PlaybookStatus defines the observed state of Playbook.
type PlaybookStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PlaybookObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Playbook is the Schema for the Playbooks API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ansible}
type Playbook struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.playbook) || (has(self.initProvider) && has(self.initProvider.playbook))",message="spec.forProvider.playbook is a required parameter"
	Spec   PlaybookSpec   `json:"spec"`
	Status PlaybookStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PlaybookList contains a list of Playbooks
type PlaybookList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Playbook `json:"items"`
}

// Repository type metadata.
var (
	Playbook_Kind             = "Playbook"
	Playbook_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Playbook_Kind}.String()
	Playbook_KindAPIVersion   = Playbook_Kind + "." + CRDGroupVersion.String()
	Playbook_GroupVersionKind = CRDGroupVersion.WithKind(Playbook_Kind)
)

func init() {
	SchemeBuilder.Register(&Playbook{}, &PlaybookList{})
}
